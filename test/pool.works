//Imports

require("dotenv").config();
var BigNumber = require("big-number");
const erc = require("./erc20");
const aave = require("./aave");
alpha = require('./alpha.js');
wall = require('./wallet.js');
const inch = require("./1inch");
const np = require("./netPosition");
var wallet;
const addressMap = new Map();
const symbolMap = new Map();
const decimalsMap = new Map();
const priceMap = new Map();

//*********************************************************************
// Misc support functions
//*********************************************************************
function printMap(name, map) {
  console.log(name);
  map.forEach((value, key) => {
    console.log(key, value); // üëâÔ∏è Chile country, 30 age
  });
}

function isNativeEquivalent(sym) {
  return ["WAVAX","AVAX"].includes(sym.toUpperCase());
}

function isNative(sym) {
  return ["AVAX"].includes(sym.toUpperCase());
}

function isStablecoin(sym) {
console.log("is stablecoin");
console.log(sym);
  return ["USDC", "USDT", "USDC.E", "DAI", "USDT.E", "DAI.E"].includes(sym.toUpperCase());
}

function getSymbolFromArray(sym,a)
{ 
console.log("getsymbolfromarray");
console.log(sym,a);
  for(let i=0;i<a.length;i++)
  { 
    if (a[i].symbol.toUpperCase() == sym.toUpperCase())
      return a[i];
  }
  throw Error(e.message+" => getSymbolFromArray ", sym, " not found");
}

function getIdSymbolFromArray(id,sym,a)
{ 
console.log("getsymbolidfromarray");
console.log(id,sym,a);
  for(let i=0;i<a.length;i++)
  { 
    if (a[i].id == id)
    { 
      if (a[i].symbol.toUpperCase() == sym.toUpperCase())
        return a[i];
    }
  }
  throw Error(e.message+" => getSymbolFromArray ", sym, " not found");
}

// divides two number and returns a decimal with decimal places of precision
function getDecimalDivision(numerator, denominator, decimal)
{ 
  let n = BigNumber(numerator).mult(10 ** decimal).div(denominator).toString();
  n = parseInt(n)/(10 ** decimal);
  return n;
}

function addCommas(n,dollar)
{  
   if (dollar === true)
     dollar = "$";
   else 
     dollar = "";
   if (n < 0)
   { 
     minus = "-";
     n = -n;
   }
   else
     minus = "";
   if (n < 1000)
     return minus+dollar+n;
   else
   {
     n = floor(n);
     return minus+dollar+n.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
   }
}

// creates addressMap, symbolMap, and decimalsMap from an array of positions
// a position is { symbol: <sym>, token: <address>, decimals: <decimals> }
// xxx possibly remove the maps and just pass around the values in the positions
function createMaps(pos)
{ 
  //console.log("CREATE MAPS",pos.length);
  for(let i=0;i<pos.length;i++)
  { 
    if (pos[i].symbol !== undefined)
    { 
      if (pos[i].token !== undefined)
      { 
        //console.log("sym",pos[i].symbol,"token",pos[i].token);
        addressMap.set(pos[i].symbol,pos[i].token);
        symbolMap.set(pos[i].token,pos[i].symbol);
      }
      if (pos[i].decimals !== undefined)
      { 
        decimalsMap.set(pos[i].symbol,pos[i].decimals);
        //console.log("dec",pos[i].decimals);
      }
    }
  }
  //console.log ("MAPS CREATED");
}


async function calculateNetPositions(owner) {
  try {
    //console.log("entering calculateNetPositions :",owner);
    var pos = await alpha.getPositions(owner);
    var pos2 = await aave.getAavePositions(owner);
    pos = pos.concat(pos2);
    createMaps(pos); // addressMap and other maps filled in here
    //console.log("Owner address",owner);
    var pos3 = await wall.getPositions(owner,addressMap);
    pos = pos.concat(pos3);
    let usd = 0; 
    let native = 0; 
    for (let i = 0; i < pos.length; i++) {
      //console.log("i=",i);
      let sym = pos[i].symbol;
      let id = pos[i].id;
      //console.log("sym=",sym);
      if (isStablecoin(sym)) {
        usd = BigNumber(usd).add(pos[i].amount).toString();
      }
      else if (isNativeEquivalent(sym)) {
        native = BigNumber(native).add(pos[i].amount).toString();
      } else {
      }
    }
    let netpos = [ 
      { id: "net", symbol: "USD", amount: usd, decimals: 6 }, 
      { id: "net", symbol: "AVAX", amount: native, decimals: 18 }
    ];
    netpos = netpos.concat(pos);
    //console.log("POS=",netpos);
    
    return netpos;
  } catch (e) {
    console.log("calculateNetPositions " + e.message);
    throw new Error(e.message+" => calculateNetPositions failed");
  }
}

async function calculateAndAdjust(wname,addr,mailResults=true)
{
  try {
    let netPosition = await calculateNetPosition(wname,addr,true);
    let avVal = netPosition.variableValue;
    let avTokens = netPosition.variableTokens;
    let uVal = netPosition.stableValue;
    let spread = netPosition.tradeThreshold;
    let netVal = netPosition.netVal;
    if (avVal > spread)
    {
      console.log("YOU ARE LONG AVAX!  TRADING ...");
      if (wname != "lance")
        await adjustDebt("WAVAX", avTokens, "USDC", addr);
      else
        throw Error("Attempt to trade on lance's wallet");
      //avTokens = addCommas(avTokens);
      //avVal = addCommas(avVal,true);
      //console.log("You are LONG, SELL", avTokens, "AVAX = $", avVal);
      //console.log("USD=$", uVal);
      if (mailResults)
        nodemailer.sendMail("SELLING "+avTokens+" AVAX",
          "You are LONG, SELLING "+avTokens+" AVAX = "+avVal+". Net Value = "+netVal);
    }
    else if (avVal < -spread)
    {
      console.log("YOU ARE SHORT AVAX!  TRADING ...");
      await adjustDebt("USDC", -avVal, "WAVAX", addr);
      //avTokens = addCommas(-avTokens);
      //avVal = addCommas(-avVal,true);
      //console.log("You are SHORT", avTokens, "AVAX, BUY", avVal, "of AVAX");
      //console.log("USD=$", uVal);
      avTokens = -avTokens;
      avVal = -avVal;
        if (mailResults)
        nodemailer.sendMail("BUYING "+avVal+" of AVAX",
          "You are SHORT, BUYING "+avTokens+" AVAX = "+avVal+". Net Value = "+netVal);
    }
    else
    {
      //avTokens = addCommas(avTokens);
      //avVal = addCommas(avVal,true);
      //console.log("Spread=",spread);
      //spread = addCommas(spread,true);
      //console.log("Spread=",spread);
      console.log("Your AVAX postion is", avTokens);
      if (mailResults)
        nodemailer.sendMail("Your AVAX postion is "+avTokens,
          "Your AVAX postion is "+avTokens+" = "+avVal+" and the spread is "+spread+". Net Value = "+netVal);
    }
  } catch (e) {
    console.log(e.message);
    nodemailer.sendMail("calculateAndAdjust() failed", e.message);
    throw Error(e.message+" => calculateAndAdjust failed");
  }
}

async function calculateNetPosition(wname,addr)
{
  try
  { 
    const netPos = await calculateNetPositions(addr);
    console.log(netPos);
    
    const tokenToPrice = await aave.getPriceOfAllTokens();

    const avaxTokenToPrice = getSymbolFromArray("WAVAX",tokenToPrice);
    let avaxPrice = avaxTokenToPrice.price*100000000;

    let av=getIdSymbolFromArray("net","AVAX",netPos);
    let avVal=BigNumber(av.amount).mult(avaxPrice).div(BigNumber(10).power(av.decimals)).div(BigNumber(10).power(8)).toString();
    // avTokens is the number of AVAX tokens to two decimal places
    let avTokens=getDecimalDivision(av.amount,BigNumber(10).power(av.decimals).toString(),2);

    let u=getSymbolFromArray("usd",netPos);
    // uVal = net dollar value of all stablecoin positions
    let uVal = BigNumber(u.amount).div(BigNumber(10).power(u.decimals)).toString();

    let ad=getIdSymbolFromArray("aave-avalanche","WAVAX",netPos);
    // adVal = value of AVAX debt from Aave
    let adVal=BigNumber(ad.amount).mult(-1).mult(avaxPrice).div(BigNumber(10).power(8)).div(BigNumber(10).power(18)).toString();

    // spread is a % of Aave AVAX debt used to determine if a trade should be executed
    let spread=BigNumber(adVal).mult(12).div(1000).toString();

    // netVal is the sum of the net AVAX and USD positions
    let netVal = BigNumber(avVal).add(uVal*100000000).toString();

    const netPosition = {
      variableValue: parseInt(avVal)/100000000,
      tradeThreshold: parseInt(spread)/100000000,
      variableTokens: avTokens,
      stableValue: uVal,
      netVal: parseInt(netVal)/100000000
    }
    console.log("Net Position:",netPosition);
    return netPosition;
  } catch (e) {
    console.log(e.message);
    nodemailer.sendMail("calculateNetPosition() failed", e.message);
    throw Error(e.message+" => calculateNetPosition failed");
  }
}

//await adjustDebt("USDC", 25.7, "WAVAX", wallet.address);
async function adjustDebt(debtTokenSym, amount, tokenToSym, walletAddress) {
  try {
    //getting contracts
    const debtTokenMap = await aave.getDebtTokenMap();
    let decimals;
    let debtTokenFrom;
    amount = Math.floor(amount * 1000000);
    const tokenTo = addressMap.get(tokenToSym);
    for (let i = 0; i < debtTokenMap.length; i++) {
      if (debtTokenMap[i].symbol == debtTokenSym) {
        debtTokenFrom = debtTokenMap[i].token;
        decimals = debtTokenMap[i].decimals - 6;
        break;
      }
    }
    const minimum = BigNumber(10)
      .pow(decimals + 6)
      .toString();

    amount = BigNumber(amount).mult(BigNumber(10).pow(decimals)).toString();
    console.log("debtTokenFrom",debtTokenFrom);
    console.log("amount",amount);
    console.log("tokenTo",tokenTo);
    const debtTokenContract = await aave.getDebtTokenContract(debtTokenFrom); //gets debt token contract
    const poolContract = await aave.getPoolContract(); // gets pool contract
    const tokenFrom = await aave.debtTokenUnderlyingAssetAddress(
      debtTokenContract
    );
    //gets the underlying address of the debt token
    const tokenFromContract = await erc.getContract(tokenFrom); //gets the token contract of the from token using the underlying address
    const tokenToContract = await erc.getContract(tokenTo); //gets the token contract of the to address
    //check to see if Adjust Debt it possible
    const amountOfTokensFromInWallet = await erc.balanceOf(
      tokenFromContract,
      walletAddress
    ); //get balance of tokens from in wallet

    let borrowAmount = await 
      BigNumber(amount).minus(BigNumber(amountOfTokensFromInWallet)).toString()
    );
    //subtract the balance of wallet from the amount that is needed to be borrowed.
    const amountOfTokensToInWallet = await erc.balanceOf(
      tokenToContract,
      walletAddress
    ); //get balance of tokens to in wallet
    tokensToRepay = await Math.floor(
      await aave.convertFromTokenToToken(tokenFrom, tokenTo, amount)
    );
    const amountOfTokensNeededToRepay = await BigNumber(tokensToRepay)
      .minus(BigNumber(amountOfTokensToInWallet))
      .toString(); //get the remaining amount of tokens needed to repay
    const convertedToken = await aave.convertFromTokenToToken(
      tokenTo,
      tokenFrom,
      amountOfTokensToInWallet
    );

    if (amountOfTokensNeededToRepay < minimum) borrowAmount = -1;
    //if you already have enough tokens to repay then you do not need to borrow any
    else {
      borrowAmount = await BigNumber(borrowAmount)
        .minus(BigNumber(convertedToken))
        .toString(); //decreases the amount of tokens needed to borrow since you already have some
    }
    const borrowMoney = await aave.canBorrowMoney(
      tokenFrom,
      borrowAmount,
      walletAddress
    ); //checks if borrowing money is allowed based on liquidation
    const availableDebtToRepay = await aave.isDebtAvailableToRepay(
      //checks if there is enough debt to repay
      tokenFrom,
      amount,
      tokenTo,
      walletAddress
    );
    console.log(borrowMoney);
    console.log(availableDebtToRepay);
    //if repayAmount < 0 set borrow amount to -1, ignore swap, convert amountFrom to AmountTo, repay that
    if (!borrowMoney) throw Error("Not enough collateral in wallet"); //change to throwing error, im not sure how to do this.
    if (!availableDebtToRepay) throw Error("Not enough debt in wallet");
    if (borrowAmount > minimum) {
      //execute adjustDebt
      //if borrow amount is less than 0 we skip this step
      console.log("Borrowing from aave");
      await aave.borrow(
        poolContract,
        debtTokenFrom,
        borrowAmount,
        walletAddress
      );
    }
    if (amountOfTokensNeededToRepay > minimum) {
      //if amount needed to repay is less than 0 we skip this step
      console.log("swapping on Uniswap");

      repayAmount = await erc.balanceOf(tokenFromContract, walletAddress);
      if (BigNumber(repayAmount).gt(BigNumber(amount).minus(BigNumber(convertedToken))))
        repayAmount = BigNumber(amount).minus(BigNumber(convertedToken)).toString();
      //const repayAmount = await Math.floor(
      //  Math.min(
      //    (BigNumber(amount).minus(BigNumber(convertedToken)).toString(),
      //    await erc.balanceOf(tokenFromContract, walletAddress))
      //  )
      //);
console.log("swap tokenContract", tokenFromContract);
console.log("tokenFrom", tokenFrom);
console.log("tokenTo", tokenTo);
console.log("repayAmount", repayAmount);
console.log("wallet", walletAddress);
      await inch.swap(
        tokenFromContract,
        tokenFrom,
        tokenTo,
        repayAmount,
        walletAddress
      );
    }
    console.log("repaying on aave");
    tokensToRepay = Math.floor(
      //Math.floor to prevent decimal errors inside of solidity
      Math.min(
        await erc.balanceOf(tokenToContract, walletAddress),
        tokensToRepay
      ).toString() //incase there are not enough tokens in the wallet due to slippage, i take the minimum of the two
    );
    await aave.repay(
      poolContract,
      tokenToContract,
      tokenTo,
      tokensToRepay,
      walletAddress
    );
    console.log("DEBT ADJUSTED!!!");
  } catch (e) {
    console.log("Error Adjusting debt: " + e.message);
    throw new Error("calculateNetPositions failed");
  }
}

async function main()
{
  try {
    var wname = "default";
    if (process.argv.length >= 3)
    {
      wname = process.argv[2];
    }
    wallet = await wall.initWallet(wname);
    await nodemailer.initEmailTo(wname);
    await calculateAndAdjust(wname,wallet.address,true);
    //await calculateNetPosition(wname,wallet.address);
    //await adjustDebt("USDC", 25.7, "WAVAX", wallet.address);
  } catch (e) {
    console.log(e.message);
  }
}

main()

module.exports = Object.assign({
  adjustDebt,
  calculateNetPosition,
  calculateAndAdjust,
});
